const webpack = require('webpack');
const webpackMerge = require('webpack-merge').merge;
const BrowserSyncPlugin = require('browser-sync-webpack-plugin');
const SimpleProgressWebpackPlugin = require('simple-progress-webpack-plugin');
const WebpackNotifierPlugin = require('webpack-notifier');
const path = require('path');
const sass = require('sass');
<%_ if (enableI18nRTL) { _%>
const postcssRTLCSS = require('postcss-rtlcss');
<%_ } _%>

const utils = require('./utils.js');
const commonConfig = require('./webpack.common.js');

const ENV = 'development';

module.exports = async (options) => webpackMerge(await commonConfig({ env: ENV }), {
  devtool: 'cheap-module-source-map', // https://reactjs.org/docs/cross-origin-errors.html
  mode: ENV,
  entry: [
    './<%= this.relativeDir(clientRootDir, clientSrcDir) %>app/<%= microfrontend ? 'main' : 'index' %>'
  ],
  output: {
    path: utils.root('<%= this.relativeDir(clientRootDir, clientDistDir) %>'),
    filename: '[name].[contenthash:8].js',
    chunkFilename: '[name].[chunkhash:8].chunk.js'
  },
  optimization: {
    moduleIds: 'named',
    splitChunks: {
      chunks: 'all', // 分割所有类型的代码
      minSize: 30000, // 生成块的最小大小
      maxAsyncRequests: 5, // 按需加载时最大的并行请求数
      maxInitialRequests: 3, // 入口文件加载时最大的并行请求数
      automaticNameDelimiter: '~', // 文件名连接符
      name: false,
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name: 'vendors',
          chunks: 'all',
        },
      },
    },
  },
  module: {
    rules: [
      {
        test: /\.(sa|sc|c)ss$/,
        use: [
          'style-loader',
          {
            loader: 'css-loader',
            options: { url: false },
          },
          {
            loader: 'postcss-loader',
<%_ if (enableI18nRTL) { _%>
            options: {
              postcssOptions: {
                plugins: [postcssRTLCSS()],
              },
            },
<%_ } _%>
          },
          {
            loader: 'sass-loader',
            options: { implementation: sass }
          }
        ]
      }
    ]
  },
  devServer: {
    hot: <%= !microfrontend %>,
    static: {
      directory: './<%= this.relativeDir(clientRootDir, clientDistDir) %>',
    },
    port: <%= devServerPort %>,
    proxy: [{
      context: [
        '/api',
        '/services',
        '/management',
        '/v3/api-docs',
        '/h2-console',
<%_ if (authenticationTypeOauth2) { _%>
        '/auth',
        '/oauth2',
        '/login',
<%_ } _%>
      ],
      target: `http${options.tls ? 's' : ''}://localhost:<%= applicationTypeMicroservice ? gatewayServerPort : serverPort %>`,
      secure: false,
      changeOrigin: options.tls
    }<% if (communicationSpringWebsocket) { %>,{
      context: [
        '/websocket'
      ],
      target: 'ws://127.0.0.1:<%= applicationTypeMicroservice ? gatewayServerPort : serverPort %>',
      ws: true
    }<% } %>],
    historyApiFallback: true
  },
  stats: process.env.JHI_DISABLE_WEBPACK_LOGS ? 'none' : options.stats,
  plugins: [
    process.env.JHI_DISABLE_WEBPACK_LOGS
      ? null
      : new SimpleProgressWebpackPlugin({
          format: options.stats === 'minimal' ? 'compact' : 'expanded'
        }),
    new BrowserSyncPlugin(
      {
        https: options.tls,
        host: 'localhost',
        port: 9000,
        proxy: {
          target: `http${options.tls ? 's' : ''}://localhost:${options.watch ? '<%= applicationTypeMicroservice ? gatewayServerPort : serverPort %>' : '<%= devServerPort %>'}`,
          ws: true,
          proxyOptions: {
              changeOrigin: false  //pass the Host header to the backend unchanged  https://github.com/Browsersync/browser-sync/issues/430
          }
      },
      socket: {
        clients: {
          heartbeatTimeout: 60000
        }
      }
      /*
      ,ghostMode: { // uncomment this part to disable BrowserSync ghostMode; https://github.com/jhipster/generator-jhipster/issues/11116
        clicks: false,
        location: false,
        forms: false,
        scroll: false
      } */
    }, {
      reload: false
    }),
    new WebpackNotifierPlugin({
      title: '<%= humanizedBaseName %>',
      contentImage: path.join(__dirname, 'logo.png')
    })
  ].filter(Boolean)
});