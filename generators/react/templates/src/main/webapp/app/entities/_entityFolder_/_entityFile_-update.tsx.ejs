import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useParams } from 'react-router-dom';
// import { Button, Row, Col, FormText, <% if (anyFieldHasDocumentation) { %>UncontrolledTooltip,<% } %> } from 'reactstrap';
import {
  isNumber,
  Translate,
  translate,
  TranslatorContext,
  ValidatedField,
  ValidatedForm,
  <% if (anyFieldHasFileBasedContentType) { %> ValidatedBlobField,<% } %>
} from 'react-jhipster';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { useForm, Controller } from 'react-hook-form';
import { InputNumber } from 'primereact/inputnumber';
import { InputText } from 'primereact/inputtext';
import { Dropdown } from 'primereact/dropdown';
import { Button } from 'primereact/button';
import { Calendar } from 'primereact/calendar';
import { InputSwitch } from 'primereact/inputswitch';
import { InputTextarea } from 'primereact/inputtextarea';
import { classNames } from 'primereact/utils';
import dayjs from 'dayjs';

import { convertDateTimeFromServer, convertDateTimeToServer, displayDefaultDateTime } from 'app/shared/util/date-utils';
<%_ if (relationships.filter(e => e.relationshipManyToMany) !== undefined) { _%>
import { mapIdList } from 'app/shared/util/entity-utils';
<%_ } _%>
import { useAppDispatch, useAppSelector } from 'app/config/store';

<%_
let otherEntityActions = new Set();

for (const otherEntity of otherEntitiesWithPersistableRelationship) {
    otherEntityActions.add({
      action: `get${otherEntity.entityNamePlural}`,
      instance: otherEntity.entityInstancePlural,
      entity: otherEntity.entityAngularName,
      reducer: otherEntity.builtInUser ? `userManagement.${otherEntity.entityInstancePlural}` : `${otherEntity.entityReactState}.entities`,
    });
  if (otherEntity.builtInUser) {
_%>
import { I<%= otherEntity.entityAngularName %> } from 'app/shared/model/user.model';
    <%_ if (authenticationTypeOauth2) { _%>
import { getUsers } from 'app/shared/reducers/user-management';
    <%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
    <%_ } _%>
  <%_ } else { _%>
    <%_ if (otherEntity.entityAngularName !== entityReactName) { _%>
import { I<%= otherEntity.entityAngularName %> } from 'app/shared/model/<%= otherEntity.entityModelFileName %>.model';
    <%_ } _%>
import { getEntities as get<%= otherEntity.entityNamePlural %> } from 'app/entities/<%= otherEntity.entityFolderName %>/<%= otherEntity.entityFileName %>.reducer';
  <%_ } _%>
<%_ } _%>
import { I<%= entityReactName %>,defaultValue } from 'app/shared/model/<%= entityModelFileName %>.model';
<%_ const enumImports = this.generateEntityClientEnumImports(fields); _%>
<%_ enumImports.forEach( (importedPath, importedType) => { _%>
import { <%- importedType %> } from '<%- importedPath %>';
<%_ }); _%>
import {
  getEntity,
  updateEntity,
  createEntity,
  reset as resetEntity
} from './<%= entityFileName %>.reducer';



export const <%= entityReactName %>Update = () => {
  const dispatch = useAppDispatch();

  const navigate = useNavigate();

  const { id } = useParams<'id'>();
  const isNew = id === undefined;


  <%_ otherEntityActions.forEach(val => { _%>
  const <%= val.instance %> = useAppSelector(state => state.<%= val.reducer %>);
  <%_ }) _%>
  const <%= entityInstance %>Entity = useAppSelector(state => state.<%= entityReactState %>.entity);
  const loading = useAppSelector(state => state.<%= entityReactState %>.loading);
  const updating = useAppSelector(state => state.<%= entityReactState %>.updating);
  const updateSuccess = useAppSelector(state => state.<%= entityReactState %>.updateSuccess);
  <%_ enumImports.forEach( (importedPath, importedType) => { _%>
  const <%- this._.lowerFirst(importedType) %>Values = Object.keys(<%- importedType %>).map(key=>({
    code: key === "null" ? "Please select" : key,
    name: translate('<%- frontendAppName %>.<%- importedType %>.'+key)
  }));
  <%_ }); _%>

  const handleClose = () => {
    navigate('/<%= entityPage %>'<%_ if (paginationPagination) { _%> + location.search<%_ } _%>);
  }

  useEffect(() => {
<%_ if (paginationInfiniteScroll) { _%>
    if (!isNew) {
      dispatch(getEntity(id));
    }
<%_ } else { _%>
    if (isNew) {
      dispatch(resetEntity());
    } else {
      dispatch(getEntity(id));
    }
<%_ } _%>

<%_ otherEntityActions.forEach(val => { _%>
    dispatch(<%= val.action %>({}));
<%_ }) _%>
  }, []);

  useEffect(() => {
    if (updateSuccess) {
      handleClose();
    }
  }, [updateSuccess]);

  const {
    control,
    formState: { errors },
    handleSubmit,
    reset,
    trigger,
  } = useForm({
    defaultValues: defaultValue,
  });

  useEffect(() => {
    if (<%= entityInstance %>Entity) {
      // aync data update the form
      reset(<%= entityInstance %>Entity);
    }
  }, [<%= entityInstance %>Entity, reset, TranslatorContext.context.locale]);

  const onSubmit = data => {
    // console.log('submit data:', data);
    if (isNew) {
      dispatch(createEntity(data));
    } else {
      dispatch(updateEntity(data));
    }

    reset();
  };
  
  const getFormErrorMessage = name => {
    return errors[name] && <small className="p-error">{errors[name].message}</small>;
  };

  

  return (
    <div className="l-card">
      {loading ? (
        <p>Loading...</p>
      ) : (
        <>
          <h5>
            <Translate contentKey="<%= i18nKeyPrefix %>.home.createOrEditLabel">Create or edit a <%= entityClass %></Translate>
          </h5>

          <form onSubmit={handleSubmit(onSubmit)}>

            <div className="l-form">
              {!isNew && (
                <div>
                  <label htmlFor="<%= primaryKey.fields[0].fieldName %>">
                    <Translate contentKey="<%= primaryKey.fields[0].fieldTranslationKey %>" />
                  </label>
                  <div>
                    <Controller                      
                      control={control}
                      name="<%= primaryKey.fields[0].fieldName %>"
                      render={({ field }) => 
                        <InputNumber id={field.name} onChange={e => field.onChange(e.value)} value={field.value} disabled />
                      }
                    />
                  </div>
                </div>
              )}
<%_ for (field of fields.filter(field => !field.id)) {
    const fieldType = field.fieldType;
    const fieldName = field.fieldName;
    const fieldNameHumanized = field.fieldNameHumanized; _%>
                <div>
                  <label htmlFor="<%= fieldName %>">
  <%_ if (enableTranslation) { _%>
                    <Translate contentKey="<%= field.fieldTranslationKey %>" />
  <%_ } else { _%>
                    <%= fieldNameHumanized %>
  <%_ } _%>                
                  </label>
                <div>
                  <Controller
                    control={control}
                    name="<%= fieldName %>"
  <%_ if (field.fieldTypeBoolean) { _%>
                    <%- include('react_validators'); %>
                    render={({ field, fieldState }) => (
                      <InputSwitch
                        id={field.name}
                        onChange={e => field.onChange(e.value)}
                        checked={field.value}
  <%_ } else if (field.fieldTypeTimed) { _%>
                    <%- include('react_validators'); %>
                    render={({ field, fieldState }) => (
                      <Calendar
                        id={field.name} 
                        onChange={e => field.onChange(e.value)}                        
                        value={field.value ? dayjs(convertDateTimeFromServer(field.value)).toDate() : null}                        
                        hourFormat="24"
                        showTime
                        showIcon
  <%_ } else if (field.fieldTypeLocalDate) { _%>
                    <%- include('react_validators'); %>
                    render={({ field, fieldState }) => (
                      <Calendar
                        id={field.name} 
                        onChange={e => field.onChange(e.value)}                        
                        value={field.value ? dayjs(convertDateTimeFromServer(field.value)).toDate() : null}
                        dateFormat="yy-mm-dd"
                        mask="9999-99-99"
                        showIcon
  <%_ } else if (field.fieldIsEnum) { _%>
                    <%- include('react_validators'); %>
                    render={({ field, fieldState }) => ( 
                      <Dropdown
                        id={field.name}
                        {...field}
                        onChange={e => field.onChange(e.value)}   
                        value={field.value ? field.value : ''}
                        options={<%= this._.lowerFirst(field.fieldType) %>Values} optionLabel="name" optionValue="code"
  <%_ } else if (field.fieldTypeNumeric) { _%>
                    <%- include('react_validators'); %>
                    render={({ field, fieldState }) => (
                      <InputNumber
                        id={field.name} 
                        onChange={e => field.onChange(e.value)} 
                        value={field.value}
  <%_ } else if (field.fieldTypeBinary) { _%>
                    <%- include('react_validators'); %>
                    render={({ field, fieldState }) => (
                     <InputTextarea
                        id={field.name}
                        {...field}
                        value={field.value ? field.value : ''}
                        rows={5}
  <%_ } else { _%>
                    <%- include('react_validators'); %>
                    render={({ field, fieldState }) => (
                      <InputText
                        id={field.name}
                        {...field}
                        value={field.value ? field.value : ''}
  <%_ } _%>
                        onBlur={() => {
                          trigger('<%= fieldName %>');
                        }}
                        className={classNames({
                          'p-invalid': fieldState.invalid,
                        })}
                        tooltipOptions={{ position: 'top' }}
  <%_ if (field.documentation && enableTranslation) { _%>
                        tooltip={translate('<%= i18nKeyPrefix %>.help.<%= fieldName %>')}
  <%_ } else { _%>
                        tooltip="<%= field.documentation %>"
  <%_ } _%>     
                      />
                    )}
                  />
                  {getFormErrorMessage('<%= fieldName %>')}
                </div>
              </div>
<%_ } _%>

<%_ for (const rel of persistableRelationships) {
    const otherEntityPkName = rel.otherEntity.primaryKey && rel.otherEntity.primaryKey.name || 'id';
    const otherEntityNamePlural = rel.otherEntityNamePlural;
    const relationshipName = rel.relationshipName;
    const relationshipNameHumanized = rel.relationshipNameHumanized;
    const relationshipFieldName = rel.relationshipFieldName;
    const relationshipFieldNamePlural = rel.relationshipFieldNamePlural;
    const otherEntityField = rel.otherEntityField;
    const relationshipRequired = rel.relationshipRequired;
    const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%>
  <%_ if (!rel.collection) { _%>
              <div>              
                <label htmlFor="<%= relationshipFieldName %>">
    <%_ if (enableTranslation) { _%>
                  <Translate contentKey="<%= translationKey %>" />
    <%_ } else { _%>
                  <%= relationshipNameHumanized %>
    <%_ } _%> 
                </label>
                <div>
                  <Controller
                    control={control}
                    name="<%= relationshipFieldName  %>"
    <%_ if (relationshipRequired) { _%>
                    rules={{required: { value: true, message: translate('entity.validation.required')}}}
    <%_ } _%>
                    render={({ field, fieldState }) => (
                      <Dropdown
                          id={field.name}
                          value={field?.value?.<%= otherEntityPkName %>}
                          onChange={e => field.onChange(<%= otherEntityNamePlural %>.find(it => it.<%= otherEntityPkName %> === e.value))}                          
                          options={<%= otherEntityNamePlural %>}
                          optionValue="<%= otherEntityPkName %>"
                          optionLabel="<%= otherEntityField %>"
                          showClear                      
                          onBlur={() => {
                            trigger('<%= relationshipFieldName %>');
                          }}
                          className={classNames({
                            'p-invalid': fieldState.invalid,
                          })}
                          tooltipOptions={{ position: 'top' }}                  
  <%_ if (enableTranslation) { _%>
                          tooltip={translate('<%= i18nKeyPrefix %>.help.<%= relationshipName %>')}
  <%_ } else { _%>
                          tooltip="<%= field.documentation %>"
  <%_ } _%>
                      />
                    )}
                  />
                </div>
              </div>
  <%_ } else { _%>    
              <div>              
                <label htmlFor="<%= relationshipFieldName %>">
    <%_ if (enableTranslation) { _%>
                  <Translate contentKey="<%= translationKey %>" />
    <%_ } else { _%>
                  <%= relationshipNameHumanized %>
    <%_ } _%> 
                </label>
                <div>
                  <Controller
                    control={control}
                    name="<%= relationshipFieldName  %>"
    <%_ if (relationshipRequired) { _%>
                    rules={{required: { value: true, message: translate('entity.validation.required')}}}
    <%_ } _%>
                    render={({ field, fieldState }) => (
                      <MultiSelect  // to do implementation of multi-list functionality
                          id={field.name}
                          value={field?.value?.id}
                          onChange={e => field.onChange(<%= otherEntityNamePlural %>.find(it => it.id === e.value))}                          
                          options={<%= otherEntityNamePlural %>}
                          optionValue="<%= otherEntityPkName %>"
                          optionLabel="<%= otherEntityField %>"
                          showClear                        
                          onBlur={() => {
                            trigger('<%= relationshipFieldName %>');
                          }}
                          className={classNames({
                            'p-invalid': fieldState.invalid,
                          })}
                          tooltipOptions={{ position: 'top' }}                  
  <%_ if (enableTranslation) { _%>
                          tooltip={translate('<%= i18nKeyPrefix %>.help.<%= relationshipName %>')}
  <%_ } else { _%>
                          tooltip="<%= field.documentation %>"
  <%_ } _%>
                      />
                    )}
                  />
                </div>
              </div>
  <%_ } _%>
<%_ } _%>
            </div>

            <div className="l-form-footer">
              <Button type="button" label={translate('entity.action.back')} icon="pi pi-arrow-left" outlined onClick={() => navigate(-1)} />
              <Button type="submit" label={translate('entity.action.save')} icon="pi pi-save" disabled={updating} />
            </div>
          </form>
        </>
      )}
    </div>
  );
};

export default <%= entityReactName %>Update;
