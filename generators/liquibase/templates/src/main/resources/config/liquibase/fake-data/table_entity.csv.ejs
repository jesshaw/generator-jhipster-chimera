<%_
let table = [];

// Generate CSV header
let header = [];
const fieldsToGenerate = [...allFields.filter(f => f.id), ...fields.filter(f => !f.id)].filter(field => field.liquibaseGenerateFakeData);
for (field of fieldsToGenerate) {
  header.push(field.columnName);
  if (field.shouldCreateContentType) {
    header.push(field.columnName + '_content_type');
  }
}
for (relationship of relationships.filter(relationship => relationship.liquibaseGenerateFakeData)) {
  const { joinColumnNames } = relationship;
  header.push(joinColumnNames[0]);
}
table.push(header);

// Generate CSV rows
for (lineNb = 0; lineNb < entity.fakeDataCount; lineNb++) {
  const rowData = entity.liquibaseFakeData[lineNb];
  let line = [];
  for (field of fieldsToGenerate) {
    let data = rowData[field.fieldName];
    // manage required
    if (data === undefined) {
      if (field.id || field.columnRequired) {
        // Remove row;
        line = [];
        break;
      }
      data = '';
    }

    line.push(data);
    if (field.shouldCreateContentType) {
      line.push('image/png');
    }
  }

  for (relationship of relationships.filter(relationship => relationship.liquibaseGenerateFakeData)) {
    const relationshipType = relationship.relationshipType;
    const otherLiquibaseFakeData = relationship.otherEntity.liquibaseFakeData;
    let relationshipRow = lineNb;
    if (relationship.otherEntity.fakeDataCount > 0 && relationshipRow >= relationship.otherEntity.fakeDataCount && !relationship.unique) {
      relationshipRow = entity.faker.number.int({min: 1, max: relationship.otherEntity.fakeDataCount}) - 1;
    }
    if (relationshipRow < relationship.otherEntity.fakeDataCount) {
      line.push(otherLiquibaseFakeData[relationshipRow][relationship.otherEntity.primaryKey.name]);
    }
  }
  if (line.length === header.length) {
    table.push(line);
  }
}

let result = table
      .map(line => line.join(';'))
      .join('\n');
_%>
<%- result %>