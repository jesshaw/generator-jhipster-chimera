package <%= packageName %>.security;

import <%= user.entityAbsoluteClass %>;
<%_ if (databaseTypeSql || databaseTypeMongodb || databaseTypeNeo4j) { _%>
import <%= packageName %>.domain.Authority;
import <%= packageName %>.domain.Resource;
<%_ } _%>
import <%= packageName %>.repository.ResourceRepository;
import <%= packageName %>.repository.UserRepository;
import org.hibernate.validator.internal.constraintvalidators.hv.EmailValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
<%_ if (reactive) { _%>
import org.springframework.security.core.userdetails.ReactiveUserDetailsService;
<%_ } _%>
import org.springframework.security.core.userdetails.UserDetails;
<%_ if (!reactive) { _%>
import org.springframework.security.core.userdetails.UserDetailsService;
<%_ } _%>
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;
<%_ if (databaseTypeSql) { _%>
import org.springframework.transaction.annotation.Transactional;
<%_ } _%>
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono;
<%_ } _%>

import java.util.*;

/**
 * Authenticate a user from the database.
 */
@Component("userDetailsService")
public class DomainUserDetailsService implements <% if (reactive) { %>Reactive<% } %>UserDetailsService {

    private static final Logger LOG = LoggerFactory.getLogger(DomainUserDetailsService.class);

    private final UserRepository userRepository;
    private final ResourceRepository resourceRepository;

    public DomainUserDetailsService(UserRepository userRepository, ResourceRepository resourceRepository) {
        this.userRepository = userRepository;
        this.resourceRepository = resourceRepository;
    }

    @Override
<%_ if (databaseTypeSql) { _%>
    @Transactional(readOnly = true)
<%_ } _%>
    public <% if (reactive) { %>Mono<UserDetails> findByUsername<% } else { %>UserDetails loadUserByUsername<% } %>(final String login) {
        LOG.debug("Authenticating {}", login);

        if (new EmailValidator().isValid(login, null)) {
            return userRepository.<% if (databaseTypeSql) { %>findOneWithAuthoritiesByEmailIgnoreCase<% } else { %>findOneByEmailIgnoreCase<% } %>(login)
<%_ if (reactive) { _%>
                .switchIfEmpty(Mono.error(new UsernameNotFoundException("User with email " + login + " was not found in the database")))
<%_ } _%>
                .map(user -> createSpringSecurityUser(login, user))<% if (!reactive) { %>
                .orElseThrow(() -> new UsernameNotFoundException("User with email " + login + " was not found in the database"))<% } %>;
        }

        String lowercaseLogin = login.toLowerCase(Locale.ENGLISH);
        return userRepository.findOne<% if (databaseTypeSql) { %>WithAuthorities<% } %>ByLogin(lowercaseLogin)
<%_ if (reactive) { _%>
            .switchIfEmpty(Mono.error(new UsernameNotFoundException("User " + lowercaseLogin + " was not found in the database")))
<%_ } _%>
            .map(user -> createSpringSecurityUser(lowercaseLogin, user))<% if (!reactive) { %>
            .orElseThrow(() -> new UsernameNotFoundException("User " + lowercaseLogin + " was not found in the database"))<% } %>;

    }

    private org.springframework.security.core.userdetails.User createSpringSecurityUser(String lowercaseLogin, <%= user.persistClass %> user) {
        if (!user.isActivated()) {
            throw new UserNotActivatedException("User " + lowercaseLogin + " was not activated");
        }
        List<String> authorityies = user.getAuthorities().stream().map(Authority::getName).toList();
        List<SimpleGrantedAuthority> grantedAuthorities = authorityies.stream().map(SimpleGrantedAuthority::new).toList();
        //不使用Authority中的Resources一对多的方式获取，是因为验证发现存在不确定性
        Set<Resource> resources = new HashSet<>(resourceRepository.findAllByAuthorityNameIn(authorityies));
        return new CustomUserDetails(user.getLogin(), user.getPassword(), grantedAuthorities, resources);
    
    }
}